package javabeeper;

import java.awt.Toolkit;

/**
 *
 * @author Randall Britten
 */
public class AlertWindow extends javax.swing.JFrame implements SnoozeObserver {

    private SnoozeController snoozeController;

    /**
     * Creates new form AlertWindow
     */
    public AlertWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Snooze = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        snoozeTimeMinutes = new javax.swing.JTextField();
        snoozeTimeSeconds = new javax.swing.JTextField();
        snoozeTimeHours = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        soundEnabled = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Restart timer");

        Snooze.setText("Snooze");
        Snooze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SnoozeActionPerformed(evt);
            }
        });

        snoozeTimeMinutes.setText("20");
        snoozeTimeMinutes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snoozeTimeMinutesActionPerformed(evt);
            }
        });

        snoozeTimeSeconds.setText("0");
        snoozeTimeSeconds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snoozeTimeSecondsActionPerformed(evt);
            }
        });

        snoozeTimeHours.setText("0");
        snoozeTimeHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snoozeTimeHoursActionPerformed(evt);
            }
        });

        jLabel1.setText("Snooze time (hh:mm:ss)");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(snoozeTimeHours, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(snoozeTimeMinutes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(snoozeTimeSeconds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(snoozeTimeMinutes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(snoozeTimeSeconds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(snoozeTimeHours, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        soundEnabled.setSelected(true);
        soundEnabled.setText("Enable audio. (Note: if disabled, then resetting snooze will enable audio again)");
        soundEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundEnabledActionPerformed(evt);
            }
        });

        jLabel2.setText("Arbitrary text message:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("You can type anything you want here, like a note to yourself for later.");
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(soundEnabled))
                            .add(layout.createSequentialGroup()
                                .add(214, 214, 214)
                                .add(Snooze))
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel2)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(soundEnabled)
                .add(35, 35, 35)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(Snooze)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void snoozeTimeHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snoozeTimeHoursActionPerformed
        snoozeAction();
    }//GEN-LAST:event_snoozeTimeHoursActionPerformed

    private void snoozeTimeSecondsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snoozeTimeSecondsActionPerformed
        snoozeAction();
    }//GEN-LAST:event_snoozeTimeSecondsActionPerformed

    private void snoozeTimeMinutesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snoozeTimeMinutesActionPerformed
        snoozeAction();
    }//GEN-LAST:event_snoozeTimeMinutesActionPerformed

    private void soundEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundEnabledActionPerformed
        snoozeController.setSoundEnabled(soundEnabled.isSelected());
    }//GEN-LAST:event_soundEnabledActionPerformed

    private void SnoozeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SnoozeActionPerformed
        snoozeAction();
    }//GEN-LAST:event_SnoozeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Snooze;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField snoozeTimeHours;
    private javax.swing.JTextField snoozeTimeMinutes;
    private javax.swing.JTextField snoozeTimeSeconds;
    private javax.swing.JCheckBox soundEnabled;
    // End of variables declaration//GEN-END:variables

    void setController(SnoozeController controller) {
        snoozeController = controller;
    }
    
    void beepAndShow() {
            if(snoozeController.isSoundEnabled()) {
                    Toolkit.getDefaultToolkit().beep();
            }
            setVisible(true);
    }

    @Override
    public void setSoundEnabled(boolean soundEnabled) {
            this.soundEnabled.setSelected(soundEnabled);

    }

    @Override
    public void setSnoozeDuration(double snoozeDurationMinutes) {
            // TODO Set the values for HH, MM and SS correctly, just doing MM for now.
            snoozeTimeMinutes.setText(Double.toString(snoozeDurationMinutes));
    }
    
    public void snoozeAction() {
        double hours = 0;
        double minutes = 0;
        double seconds = 0;
        try {
            hours = Double.parseDouble(snoozeTimeHours.getText());
            minutes = Double.parseDouble(snoozeTimeMinutes.getText());
            seconds = Double.parseDouble(snoozeTimeSeconds.getText());

        }
        catch (NumberFormatException e) {
                // Do nothing about error, but proceed with values gathered so far.
        }

        double totalSnoozeTimeMinutes = (hours * Utilities.MINUTES_PER_HOUR) + (minutes) + (seconds / Utilities.SECONDS_PER_MINUTE);
        snoozeController.restartSnoozing(totalSnoozeTimeMinutes);
    }
    
}
