package javabeeper;

/**
 *
 * @author Randall Britten
 */
public class MonitorWindow extends javax.swing.JFrame implements SnoozeObserver {

    private SnoozeController snoozeController;
    
    /**
     * Creates new form MonitorWindow
     */
    public MonitorWindow() {
        initComponents();
        getRootPane().setDefaultButton(resetCountdown_button);        
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        timeRemaining = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        soundEnabled = new javax.swing.JCheckBox();
        useFullScreen = new javax.swing.JCheckBox();
        resetCountdown_button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        snoozeTimeHours = new javax.swing.JSpinner();
        snoozeTimeMinutes = new javax.swing.JSpinner();
        snoozeTimeSeconds = new javax.swing.JSpinner();
        alertAsSeparateProcess = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Beeper");

        jLabel2.setText("Current countdown:");

        timeRemaining.setEditable(false);
        timeRemaining.setFont(new java.awt.Font("Lucida Grande", 1, 72)); // NOI18N
        timeRemaining.setText(" ");

        jLabel3.setText("Version: 0.18");

        soundEnabled.setSelected(true);
        soundEnabled.setText("Enable audio. (Note: if disabled, then resetting snooze will enable audio again)");
        soundEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundEnabledActionPerformed(evt);
            }
        });

        useFullScreen.setText("Enable full screen");
        useFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useFullScreenActionPerformed(evt);
            }
        });

        resetCountdown_button.setText("Reset countdown");
        resetCountdown_button.setFocusCycleRoot(true);
        resetCountdown_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCountdown_buttonActionPerformed(evt);
            }
        });

        jLabel4.setText("Reset countdown to (hh:mm:ss)");

        snoozeTimeHours.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), null, Long.valueOf(1L)));

        snoozeTimeMinutes.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(20L), Long.valueOf(0L), null, Long.valueOf(1L)));

        snoozeTimeSeconds.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), null, Long.valueOf(1L)));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(snoozeTimeHours, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(snoozeTimeMinutes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(snoozeTimeSeconds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(snoozeTimeHours, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(snoozeTimeMinutes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(snoozeTimeSeconds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        alertAsSeparateProcess.setText("Display alert as a separate process (sometimes helps with UI focus issues).");
        alertAsSeparateProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alertAsSeparateProcessActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, timeRemaining)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jLabel3))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(20, 20, 20)
                                .add(jLabel2))
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(soundEnabled)
                                    .add(useFullScreen)))
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(resetCountdown_button)
                                    .add(alertAsSeparateProcess))))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(timeRemaining, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(soundEnabled)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(useFullScreen)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alertAsSeparateProcess)
                .add(23, 23, 23)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resetCountdown_button)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 47, Short.MAX_VALUE)
                .add(jLabel3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void soundEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundEnabledActionPerformed
        snoozeController.setSoundEnabled(soundEnabled.isSelected());
    }//GEN-LAST:event_soundEnabledActionPerformed

    private void useFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useFullScreenActionPerformed
        snoozeController.setUseFullScreen(useFullScreen.isSelected());
    }//GEN-LAST:event_useFullScreenActionPerformed

    private void resetCountdown_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCountdown_buttonActionPerformed
        snoozeAction();
    }//GEN-LAST:event_resetCountdown_buttonActionPerformed

    private void alertAsSeparateProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alertAsSeparateProcessActionPerformed
        snoozeController.setUseSeparateProcess(alertAsSeparateProcess.isSelected());
    }//GEN-LAST:event_alertAsSeparateProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alertAsSeparateProcess;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton resetCountdown_button;
    private javax.swing.JSpinner snoozeTimeHours;
    private javax.swing.JSpinner snoozeTimeMinutes;
    private javax.swing.JSpinner snoozeTimeSeconds;
    private javax.swing.JCheckBox soundEnabled;
    private javax.swing.JTextField timeRemaining;
    private javax.swing.JCheckBox useFullScreen;
    // End of variables declaration//GEN-END:variables

    void setController(SnoozeController controller) {
        snoozeController = controller;
    }
    
    @Override
    public void setSoundEnabled(boolean soundEnabled) {
        this.soundEnabled.setSelected(soundEnabled);		
    }

    // @todo: copied from AlertWindow, should find a way of handling common code on UI, probably use common superclass.
    @Override
    public void setSnoozeDuration(double snoozeDurationMinutes) {
        snoozeTimeHours.setValue(Utilities.minutesToHoursMinutesSeconds(snoozeDurationMinutes).hours);
        snoozeTimeMinutes.setValue(Utilities.minutesToHoursMinutesSeconds(snoozeDurationMinutes).minutes);
        snoozeTimeSeconds.setValue(Utilities.minutesToHoursMinutesSeconds(snoozeDurationMinutes).seconds);
    }
    
    // @todo: copied from AlertWindow, should find a way of handling common code on UI, probably use common superclass.
    @Override
    public void setSnoozeDurationAndDoSnooze(double snoozeDurationMinutes) {
        setSnoozeDuration(snoozeDurationMinutes);
        toBack();
        alertAsSeparateProcess.setEnabled(true);
    }
    

    public void setTimeRemainingDisplay(double paramMinutesRemaining) {
        String timeStringHHMMSS = Utilities.minutesAsTimeStringHHMMSS(paramMinutesRemaining);
        timeRemaining.setText(timeStringHHMMSS);
        setTitle(timeStringHHMMSS + "  Java Beeper" );
    }

    // @todo: copied from AlertWindow, should find a way of handling common code on UI, probably use common superclass.
    public void snoozeAction() {
        long hours = (long) snoozeTimeHours.getValue();
        long minutes = (long) snoozeTimeMinutes.getValue();
        long seconds = (long) snoozeTimeSeconds.getValue();

        snoozeController.restartSnoozing(new Utilities.HoursMinutesSeconds(hours, minutes, seconds));
    }

    @Override
    public void itIsTimeToShowAlert() {
        alertAsSeparateProcess.setEnabled(false);
    }
    

}
